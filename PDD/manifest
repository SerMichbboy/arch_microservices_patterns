1. Начинай с домена, а не с фреймворка
Сначала формулируй бизнес‑правила и сущности в чистом виде (domain layer).

Определи инварианты (что всегда должно быть верно) и сценарии использования (use‑cases).

Не привязывайся к конкретной БД, брокеру или веб‑фреймворку на старте.

2. Держи слои изолированными
API слой — только приём/отдача данных, валидация, маппинг DTO.

Application слой — оркестрация домена и инфраструктуры.

Domain слой — чистая логика, без зависимостей.

Infrastructure слой — адаптеры к внешнему миру.

Зависимости направлены внутрь (Dependency Inversion).

3. Внедряй зависимости через интерфейсы
Определи протоколы/абстракции для репозиториев, клиентов, шины событий.

Реализации подсовывай через DI (в FastAPI — через Depends, в других — через контейнеры).

Это позволит легко подменять адаптеры и тестировать без реальных сервисов.

4. Пиши тесты параллельно с кодом
Unit‑тесты для домена и use‑cases.

Интеграционные для адаптеров (БД, брокеры).

Контрактные для API и событий.

Включи тесты в CI, чтобы не было регрессий.

5. Следи за читаемостью
Маленькие файлы и классы, один модуль — одна ответственность.

Говорящие имена, минимум «магии».

Докстринги для публичных методов и сложных мест.

Консистентный стиль (ruff/black/isort).

6. Встраивай наблюдаемость с первого дня
Логи с контекстом (trace_id, user_id).

Метрики (Prometheus): RPS, latency, ошибки.

Трейсинг (OpenTelemetry) для распределённых вызовов.

Health/ready‑эндпоинты для оркестратора.

7. Планируй масштабирование
Stateless‑архитектура — горизонтальное масштабирование без боли.

Очереди/шины для фоновых задач и интеграций.

Кэш для тяжёлых read‑операций.

Идемпотентность для повторных запросов.

8. Управляй конфигурацией правильно
Всё через ENV (pydantic‑settings).

Разделяй конфиги по окружениям (dev/stage/prod).

Не хранить секреты в коде.

9. Интегрируй автоматизацию
Makefile или invoke для типовых команд.

CI/CD пайплайн: lint → test → build → deploy.

Автоматические миграции БД при деплое.

10. Рефакторинг как часть процесса
Не откладывай «на потом» — улучшай код при каждом изменении.

Убирай дубли, выноси повторяющееся в общие модули.

Следи за зависимостями — не тащи лишние пакеты.
